<%- include("../layout.ejs"); %>
<head>
 
  <style>
    .container {
      max-width: 600px;
      margin: auto;
    }
  
    .chat-box {
      border: 1px solid #ddd;
      max-height: 300px;
      overflow-y: auto;
      margin-bottom: 20px;
    }
  
    .messages {
      list-style: none;
      padding: 0;
    }
  
    .messages li {
      margin: 20px 0;
      position: relative;
    }
  
    .sent {
      text-align: right;
      list-style: none
    }
  
    .received {
      text-align: left;
      list-style: none;
    }
  
    .message-content {
      display: inline-block;
      padding: 10px;
      border-radius: 5px;
      background-color: #f1f1f1;
      position: relative;
      max-width: 50%; /* Set max-width to 50% */
      word-wrap: break-word;

    }
  
    .receiver {
      font-size: 10px; /* Adjust the font size as needed */
      position: absolute;
      top: -20px;
      left: 5px;
      padding: 5px;
      display: inline-block;
      list-style: none;
    }
  
    .receiver-right {
      font-size: 10px; /* Adjust the font size as needed */
      position: absolute;
      top: -20px;
      left: 5px;
      padding: 5px;
      display: inline-block;
      list-style: none;
    }
    .sent .left-hr {
    margin-right: 5px; /* Adjust this margin as needed */
  }

  .received .right-hr {
    margin-left: 5px; /* Adjust this margin as needed */
  }

  .left-hr, .right-hr {
    position: absolute;
    bottom: 5px; /* Adjust the distance from the text */
    height: 1px; /* Set the height of the hr */
    background-color: #ccc; /* Set the color of the hr */
  }
    /* .right-hr {
      position: absolute;
      width: 80%;
      left: 100px;
    }
    .sent .left-hr {
  margin-right: 5px; /* Adjust this margin as needed */
/* } */

.received .right-hr {
  margin-left: 5px; /* Adjust this margin as needed */
}
    .left-hr {
      position: absolute;
      width: 80%;
      left: 5px;
      
    } */
  
    .timestamp {
      display: none;
      position: absolute;
      bottom: -20px;
      left: 5px;
      background-color: #fff;
      padding: 5px;
      border: 1px solid #ccc;
      font-size: 10px; /* Adjust the font size as needed */
    }
  
    .message-content:hover .timestamp {
      display: block;
    }
  
    .sender {
      font-weight: 450;
      font-size: 16px;
      margin-right: 5px;
    }
  
    .message-form {
      margin-top: 20px;
    }
  
    .form-group {
      margin-bottom: 15px;
    }
  
    .btn-primary {
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 10px 20px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      margin: 4px 2px;
      cursor: pointer;
      border-radius: 5px;
    }
  </style>
  <script src="https://cdn.socket.io/4.0.1/socket.io.min.js" integrity="sha384-LzhRnpGmQP+lOvWruF/lgkcqD+WDVt9fU3H4BWmwP5u5LTmkUGafMcpZKNObVMLU" crossorigin="anonymous"></script>

  
<script>
 // Update the form ID to "messagesForm"


document.addEventListener('DOMContentLoaded', function () {
  const messageForm = document.getElementById('messagesForm');
  
  const socket = io("/messages");
  const chatBox = document.getElementById('chatBox');
  const messageInput = document.getElementById('message');

  // Listen for join event
  socket.on('join', function (data) {
  });
  function loadReady() {
    socket.emit("ready", { userId: '<%= UserId %>', senderId: '<%= user1 %>'});
  }
  loadReady();
  // Listen for incoming messages
  socket.on('message', function (data) {
    const typingIndicator = document.getElementById('typing');
    const ul = document.querySelector('.messages');
    const li = document.createElement('li');
    const currentTimestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false });
    const messageType = data.senderId === '<%= user1 %>' ? 'sent' : 'received';
    timestampType = messageType === 'sent' ? 'receiver-right' : 'receiver';
   typingIndicator.style.display = "none";
    
    li.className = messageType;
    li.innerHTML = `
    
      <span class="${timestampType}">${currentTimestamp}:</span>
      <span class="sender">${messageType === 'sent' ? 'Me' : '<%= user.name %>'}:</span>
      <span class="message-content">${data.message}</span>`;

    ul.appendChild(li);

    // Scroll to the bottom of the chat box
    chatBox.scrollTop = chatBox.scrollHeight;
  });
  socket.on('typing', function (data) {
    // Handle the typing event (display typing indicator, etc.)
    const li = document.createElement('li');
    const typingIndicator = document.getElementById('typing');
    chatBox
    if(data.senderId == '<%= UserId %>' && data.isTyping == true){

      typingIndicator.style.display = "block";
      
  }else {
    typingIndicator.style.display = "none";
  
  }
  chatBox.scrollTop = chatBox.scrollHeight;
});
  // Scroll to the bottom of the chat box
chatBox.scrollTop = chatBox.scrollHeight;
  // Listen for typing event
  socket.on('typing', function (data) {
    // Handle the typing event (display typing indicator, etc.)
  });

  // Handle form submission
  messageForm.addEventListener('submit', function (e) {
    e.preventDefault();
   
    const message = messageInput.value.trim();

    if (message !== '') {
      
      // Emit the message to the server
      socket.emit('message', { userId: '<%= UserId %>', senderId: '<%= user1 %>', message });

      // Clear the message input field
      messageInput.value = '';

      // Make an AJAX request to handle the server-side action
      fetch('/users/<%= UserId %>/send-message', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }), // Adjust the payload as needed
      })
        .then(response => response.json())
        .then(data => {
          // Handle the server's response if needed
          console.log('Server response:', data);
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }
  });
  messageInput.addEventListener('input', function () {
    const isTyping = messageInput.value.trim() !== '';

    // Emit the typing event to the server
    socket.emit('typing', { senderId: '<%= user1 %>', isTyping });
  });


});

</script>

</head>
 
 <body>
  <script src="https://cdn.socket.io/4.0.1/socket.io.min.js" integrity="sha384-LzhRnpGmQP+lOvWruF/lgkcqD+WDVt9fU3H4BWmwP5u5LTmkUGafMcpZKNObVMLU" crossorigin="anonymous"></script>

  <div class="container">
    <h1>Chat with <%= user.name %></h1>
    <span class="message-content" id="typing" style="display: none;">Typing...</span>
    <!-- Display existing messages -->
    <div class="chat-box" id="chatBox">
      
      <ul class="messages">
        
        <% for (const sentMessage of sortedMessages) { %>
          <% if (sentMessage.senderId == user1 && sentMessage.reciverId == UserId) { %>
            <li class="sent">
              <span class="receiver-right"><%= sentMessage.timestamp %>:</span>
              <!-- <hr class="left-hr"> -->
              <span class="sender">Me:</span>
              <span class="message-content">
                <%= sentMessage.message %>
              </span>
            </li>
         
          <% } else if (sentMessage.senderId == UserId && sentMessage.reciverId == user1) { %>
            <li class="received">
              <span class="receiver"><%= sentMessage.timestamp %>:</span>
              <span class ="message-content" style ="display: none;">Typing...</span>
              <!-- <hr class="right-hr"> -->
              <span class="sender"><%= user.name %>:</span>
              <span class="message-content">
                <%= sentMessage.message %>
              </span>
            </li>
          <% } %>
        <% } %>
       
      </ul>
    </div>

    <!-- Message input form -->
    <form action="/users/<%= UserId %>/send-message" method="post" id="messagesForm" class="message-form">
      <div class="form-group">
        <input class="form-control" id="message" name="message" rows="3" placeholder="Type your message here..."></input>
      </div>
      <button type="submit" class="btn btn-primary">Send</button>
    </form>
  </div>
  <!-- ... WebSocket script ... -->
 
</body>
</html>
